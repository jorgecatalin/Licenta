{"version":3,"sources":["Componente/Intrebare.js","Componente/Raspunsuri.js","Componente/Meniu.js","Componente/Intrebari.js","Componente/Content.js","Componente/Incepe.js","App.js","serviceWorker.js","index.js"],"names":["Intrebare","props","className","this","text","React","Component","Raspunsuri","onClick","date","getRaspunsCurent","intrebariText","Meniu","Intrebari","raspunsuriText","raspunsuri","getText","getRaspunsuriText","val","getRaspunsuri","intrebari","push","Content","bind","schimbaIntrebarea","state","i","raspunsCurent","_raspuns","setState","console","log","Incepe","action","App","handleSw","sw","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAYeA,E,YARb,WAAYC,GAAQ,qEACZA,I,sEAGN,OAAO,yBAAKC,UAAU,aAAaC,KAAKF,MAAMG,U,GAL1BC,IAAMC,WCqBfC,E,YApBb,WAAYN,GAAQ,qEACZA,I,sEAEE,IAAD,OACP,OACE,yBAAKC,UAAU,cACb,yBAAKM,QAAS,kBAAM,EAAKP,MAAMQ,KAAKC,iBAAiB,KAClDP,KAAKF,MAAMQ,KAAKE,cAAc,IAEjC,yBAAKH,QAAS,kBAAM,EAAKP,MAAMQ,KAAKC,iBAAiB,KAClDP,KAAKF,MAAMQ,KAAKE,cAAc,IAEjC,yBAAKH,QAAS,kBAAM,EAAKP,MAAMQ,KAAKC,iBAAiB,KAArD,oB,GAbiBL,IAAMC,WCShBM,E,YARb,WAAYX,GAAQ,qEACZA,I,sEAGN,OAAO,kC,GALSI,IAAMC,WCUXO,EAZb,WAAYT,EAAMU,EAAgBC,GAAa,IAAD,gCAK9CC,QAAU,kBAAM,EAAKZ,MALyB,KAO9Ca,kBAAoB,SAAAC,GAAG,OAAI,EAAKJ,eAAeI,IAPD,KAS9CC,cAAgB,SAAAD,GAAG,OAAI,EAAKH,WAAWG,IARrCf,KAAKC,KAAOA,EACZD,KAAKW,eAAiBA,EACtBX,KAAKY,WAAaA,GCGlBK,EAAY,GAEhBA,EAAUC,KAAK,IAAIR,EAAU,kBAAmB,CAAC,KAAM,MAAO,EAAC,GAAM,K,IAuCtDS,E,YApCb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,iBAAmB,EAAKA,iBAAiBa,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,MAAQ,CACXC,EAAG,EACHC,cAAe,GANA,E,sEAUjB,OACE,yBAAKzB,UAAU,WACb,kBAAC,EAAD,CAAWE,KAAMgB,EAAUjB,KAAKsB,MAAMC,GAAGtB,OACzC,kBAAC,EAAD,CACEK,KAAM,CACJE,cAAeS,EAAUjB,KAAKsB,MAAMC,GAAGZ,eACvCC,WAAYK,EAAUjB,KAAKsB,MAAMC,GAAGX,WACpCL,iBAAkBP,KAAKO,oBAG3B,kBAAC,EAAD,S,uCAKWkB,GACfzB,KAAK0B,SAAS,CACZF,cAAeC,IAEjBzB,KAAKqB,sB,0CAGLM,QAAQC,IAAI,+B,GAjCM1B,IAAMC,WCMb0B,E,YAbb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,MAAQ,GAFI,E,sEAKjB,OACE,yBAAKvB,UAAU,UACb,yBAAKM,QAASL,KAAKF,MAAMgC,QAAzB,e,GARa5B,IAAMC,WCsCZ4B,E,YAnCb,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KACDkC,SAAW,EAAKA,SAASZ,KAAd,gBAChB,EAAKE,MAAQ,CACXW,GAAI,GAJW,E,sEAQjB,OAAIjC,KAAKsB,MAAMW,GAEX,yBAAKlC,UAAU,aACb,kBAAC,EAAD,CAAQ+B,OAAQ9B,KAAKgC,YAKvB,yBAAKjC,UAAU,aACb,kBAAC,EAAD,S,iCAMN4B,QAAQC,IAAI,QACR5B,KAAKsB,MAAMW,GACbjC,KAAK0B,SAAS,CACZO,GAAI,IAGNjC,KAAK0B,SAAS,CACZO,GAAI,Q,GA/BM/B,IAAMC,WCOJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.465c879c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nclass Intrebare extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return <div className=\"Intrebare\">{this.props.text}</div>\r\n  }\r\n}\r\n\r\nexport default Intrebare\r\n","import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nclass Raspunsuri extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Raspunsuri\">\r\n        <div onClick={() => this.props.date.getRaspunsCurent(0)}>\r\n          {this.props.date.intrebariText[0]}\r\n        </div>\r\n        <div onClick={() => this.props.date.getRaspunsCurent(1)}>\r\n          {this.props.date.intrebariText[1]}\r\n        </div>\r\n        <div onClick={() => this.props.date.getRaspunsCurent(2)}>\r\n          Nu conteaza\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Raspunsuri\r\n","import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nclass Meniu extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return <div></div>\r\n  }\r\n}\r\n\r\nexport default Meniu\r\n","class Intrebari {\r\n  constructor(text, raspunsuriText, raspunsuri) {\r\n    this.text = text\r\n    this.raspunsuriText = raspunsuriText\r\n    this.raspunsuri = raspunsuri\r\n  }\r\n  getText = () => this.text\r\n\r\n  getRaspunsuriText = val => this.raspunsuriText[val]\r\n\r\n  getRaspunsuri = val => this.raspunsuri[val]\r\n}\r\n\r\nexport default Intrebari\r\n","import React from \"react\"\r\nimport \"../index.css\"\r\nimport Intrebare from \"./Intrebare.js\"\r\nimport Raspunsuri from \"./Raspunsuri.js\"\r\nimport Meniu from \"./Meniu.js\"\r\nimport Intrebari from \"./Intrebari.js\"\r\n\r\nlet intrebari = []\r\n\r\nintrebari.push(new Intrebari(\"Prima Intrebare\", [\"Da\", \"Nu\"], [true, false]))\r\n\r\nclass Content extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.getRaspunsCurent = this.getRaspunsCurent.bind(this)\r\n    this.schimbaIntrebarea = this.schimbaIntrebarea.bind(this)\r\n    this.state = {\r\n      i: 0,\r\n      raspunsCurent: 4\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Content\">\r\n        <Intrebare text={intrebari[this.state.i].text} />\r\n        <Raspunsuri\r\n          date={{\r\n            intrebariText: intrebari[this.state.i].raspunsuriText,\r\n            raspunsuri: intrebari[this.state.i].raspunsuri,\r\n            getRaspunsCurent: this.getRaspunsCurent\r\n          }}\r\n        />\r\n        <Meniu />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getRaspunsCurent(_raspuns) {\r\n    this.setState({\r\n      raspunsCurent: _raspuns\r\n    })\r\n    this.schimbaIntrebarea()\r\n  }\r\n  schimbaIntrebarea() {\r\n    console.log(\"Am schimbat intrebarea!\")\r\n  }\r\n}\r\n\r\nexport default Content\r\n","import React from \"react\"\r\nimport \"../index.css\"\r\n\r\nclass Incepe extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Incepe\">\r\n        <div onClick={this.props.action}>Incepe</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Incepe\r\n","import React from \"react\"\r\nimport \"./index.css\"\r\nimport Content from \"./Componente/Content.js\"\r\nimport Incepe from \"./Componente/Incepe.js\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleSw = this.handleSw.bind(this)\r\n    this.state = {\r\n      sw: 1\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.sw) {\r\n      return (\r\n        <div className=\"Container\">\r\n          <Incepe action={this.handleSw} />\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"Container\">\r\n          <Content />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  handleSw() {\r\n    console.log(\"ceva\")\r\n    if (this.state.sw)\r\n      this.setState({\r\n        sw: 0\r\n      })\r\n    else\r\n      this.setState({\r\n        sw: 1\r\n      })\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}